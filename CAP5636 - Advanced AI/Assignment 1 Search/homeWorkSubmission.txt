1. Enter the score from the auto grader.

Q1: 3/3
Q2: 3/3
Q3: 3/3
Q4: 3/3
Q5: 3/3
Q6: 3/3
Q7: 5/4
Q8: 3/3
Total: 26/25

2. Describe briefly how you solved the problems.

Q1: used a generic treeSearch algorithm, which gets passed in a stack.  Loops through all elements in the tree (successors) and collects the path from the stack 
Q2: used the same generic treeSearch, but this time passed in a priority queue which made the search go from top -> down instead of bottom -> up
Q3: solved very similarly to the generic treeSearch, only this time the cost was used as the priority instead of when it was added
Q4: Implemented aStarSearch where the algorithm kept track of where it went up to any point, then continues to append the total_path until a goal was found.  It made sure to keep track of the visited nodes so as to not revisit them
Q5: Used aStarSearch, but kept track of the corners visited for each state.  The goal state only returned true when all 4 corners were visited.  This was kept in a set in the state. Also, found the successors using the walls grid
Q6: Implemented a heuristic for the corners that would check the mazeDistance for the closest not visited corner (give larger values the farther away it was), from there find the path.
Q7: Implemented a foodHeuristic that would simply give the closest food the lowest cost by checking all of the food in the map and the distance the current point was using the mazeDistance function given to us
Q8: Made the goal state any food that returned true on the food grid.  Also, just used the basic aStarSearch

3. Paste the output from auto grader.

Question q1
	===========

	*** PASS: test_cases\q1\graph_backtrack.test
	*** 	solution:		['1:A->C', '0:C->G']
	*** 	expanded_states:	['A', 'D', 'C']
	*** PASS: test_cases\q1\graph_bfs_vs_dfs.test
	*** 	solution:		['2:A->D', '0:D->G']
	*** 	expanded_states:	['A', 'D']
	*** PASS: test_cases\q1\graph_infinite.test
	*** 	solution:		['0:A->B', '1:B->C', '1:C->G']
	*** 	expanded_states:	['A', 'B', 'C']
	*** PASS: test_cases\q1\graph_manypaths.test
	*** 	solution:		['2:A->B2', '0:B2->C', '0:C->D', '2:D->E2', '0:E2->F', '0:F->G']
	*** 	expanded_states:	['A', 'B2', 'C', 'D', 'E2', 'F']
	*** PASS: test_cases\q1\pacman_1.test
	*** 	pacman layout:		mediumMaze
	*** 	solution length: 130
	*** 	nodes expanded:		146

	### Question q1: 3/3 ###


	Question q2
	===========

	*** PASS: test_cases\q2\graph_backtrack.test
	*** 	solution:		['1:A->C', '0:C->G']
	*** 	expanded_states:	['A', 'B', 'C', 'D']
	*** PASS: test_cases\q2\graph_bfs_vs_dfs.test
	*** 	solution:		['1:A->G']
	*** 	expanded_states:	['A', 'B']
	*** PASS: test_cases\q2\graph_infinite.test
	*** 	solution:		['0:A->B', '1:B->C', '1:C->G']
	*** 	expanded_states:	['A', 'B', 'C']
	*** PASS: test_cases\q2\graph_manypaths.test
	*** 	solution:		['1:A->C', '0:C->D', '1:D->F', '0:F->G']
	*** 	expanded_states:	['A', 'B1', 'C', 'B2', 'D', 'E1', 'F', 'E2']
	*** PASS: test_cases\q2\pacman_1.test
	*** 	pacman layout:		mediumMaze
	*** 	solution length: 68
	*** 	nodes expanded:		269

	### Question q2: 3/3 ###


	Question q3
	===========

	*** PASS: test_cases\q3\graph_backtrack.test
	*** 	solution:		['1:A->C', '0:C->G']
	*** 	expanded_states:	['A', 'B', 'C', 'D']
	*** PASS: test_cases\q3\graph_bfs_vs_dfs.test
	*** 	solution:		['1:A->G']
	*** 	expanded_states:	['A', 'B']
	*** PASS: test_cases\q3\graph_infinite.test
	*** 	solution:		['0:A->B', '1:B->C', '1:C->G']
	*** 	expanded_states:	['A', 'B', 'C']
	*** PASS: test_cases\q3\graph_manypaths.test
	*** 	solution:		['1:A->C', '0:C->D', '1:D->F', '0:F->G']
	*** 	expanded_states:	['A', 'B1', 'C', 'B2', 'D', 'E1', 'F', 'E2']
	*** PASS: test_cases\q3\ucs_0_graph.test
	*** 	solution:		['Right', 'Down', 'Down']
	*** 	expanded_states:	['A', 'B', 'D', 'C', 'G']
	*** PASS: test_cases\q3\ucs_1_problemC.test
	*** 	pacman layout:		mediumMaze
	*** 	solution length: 68
	*** 	nodes expanded:		269
	*** PASS: test_cases\q3\ucs_2_problemE.test
	*** 	pacman layout:		mediumMaze
	*** 	solution length: 74
	*** 	nodes expanded:		260
	*** PASS: test_cases\q3\ucs_3_problemW.test
	*** 	pacman layout:		mediumMaze
	*** 	solution length: 152
	*** 	nodes expanded:		173
	*** PASS: test_cases\q3\ucs_4_testSearch.test
	*** 	pacman layout:		testSearch
	*** 	solution length: 7
	*** 	nodes expanded:		14
	*** PASS: test_cases\q3\ucs_5_goalAtDequeue.test
	*** 	solution:		['1:A->B', '0:B->C', '0:C->G']
	*** 	expanded_states:	['A', 'B', 'C']

	### Question q3: 3/3 ###


	Question q4
	===========

	*** PASS: test_cases\q4\astar_0.test
	*** 	solution:		['Right', 'Down', 'Down']
	*** 	expanded_states:	['A', 'B', 'D', 'C', 'G']
	*** PASS: test_cases\q4\astar_1_graph_heuristic.test
	*** 	solution:		['0', '0', '2']
	*** 	expanded_states:	['S', 'A', 'D', 'C']
	*** PASS: test_cases\q4\astar_2_manhattan.test
	*** 	pacman layout:		mediumMaze
	*** 	solution length: 68
	*** 	nodes expanded:		221
	*** PASS: test_cases\q4\astar_3_goalAtDequeue.test
	*** 	solution:		['1:A->B', '0:B->C', '0:C->G']
	*** 	expanded_states:	['A', 'B', 'C']
	*** PASS: test_cases\q4\graph_backtrack.test
	*** 	solution:		['1:A->C', '0:C->G']
	*** 	expanded_states:	['A', 'B', 'C', 'D']
	*** PASS: test_cases\q4\graph_manypaths.test
	*** 	solution:		['1:A->C', '0:C->D', '1:D->F', '0:F->G']
	*** 	expanded_states:	['A', 'B1', 'C', 'B2', 'D', 'E1', 'F', 'E2']

	### Question q4: 3/3 ###


	Question q5
	===========

	dd
	*** PASS: test_cases\q5\corner_tiny_corner.test
	*** 	pacman layout:		tinyCorner
	*** 	solution length:		28

	### Question q5: 3/3 ###


	Question q6
	===========

	*** PASS: heuristic value less than true cost at start state
	*** PASS: heuristic value less than true cost at start state
	*** PASS: heuristic value less than true cost at start state
	dd
	path: ['North', 'East', 'East', 'East', 'East', 'North', 'North', 'West', 'West', 'West', 'West', 'North', 'North', 'North', 'North', 'North', 'North', 'North', 'North', 'West', 'West', 'West', 'West', 'South', 'South', 'East', 'East', 'East', 'East', 'South', 'South', 'South', 'South', 'South', 'South', 'West', 'West', 'South', 'South', 'South', 'West', 'West', 'North', 'East', 'East', 'North', 'North', 'East', 'East', 'East', 'East', 'East', 'East', 'East', 'East', 'South', 'South', 'East', 'East', 'East', 'East', 'East', 'North', 'North', 'East', 'East', 'North', 'North', 'East', 'East', 'North', 'North', 'East', 'East', 'East', 'East', 'South', 'South', 'South', 'South', 'East', 'East', 'North', 'North', 'East', 'East', 'South', 'South', 'South', 'South', 'South', 'North', 'North', 'North', 'North', 'North', 'North', 'North', 'West', 'West', 'North', 'North', 'East', 'East', 'North', 'North']
	path length: 106
	*** PASS: Heuristic resulted in expansion of 801 nodes

	### Question q6: 3/3 ###


	Question q7
	===========

	*** PASS: test_cases\q7\food_heuristic_1.test
	*** PASS: test_cases\q7\food_heuristic_10.test
	*** PASS: test_cases\q7\food_heuristic_11.test
	*** PASS: test_cases\q7\food_heuristic_12.test
	*** PASS: test_cases\q7\food_heuristic_13.test
	*** PASS: test_cases\q7\food_heuristic_14.test
	*** PASS: test_cases\q7\food_heuristic_15.test
	*** PASS: test_cases\q7\food_heuristic_16.test
	*** PASS: test_cases\q7\food_heuristic_17.test
	*** PASS: test_cases\q7\food_heuristic_2.test
	*** PASS: test_cases\q7\food_heuristic_3.test
	*** PASS: test_cases\q7\food_heuristic_4.test
	*** PASS: test_cases\q7\food_heuristic_5.test
	*** PASS: test_cases\q7\food_heuristic_6.test
	*** PASS: test_cases\q7\food_heuristic_7.test
	*** PASS: test_cases\q7\food_heuristic_8.test
	*** PASS: test_cases\q7\food_heuristic_9.test
	*** PASS: test_cases\q7\food_heuristic_grade_tricky.test
	*** 	expanded nodes: 4137
	*** 	thresholds: [15000, 12000, 9000, 7000]

	### Question q7: 5/4 ###


	Question q8
	===========

	[SearchAgent] using function depthFirstSearch
	[SearchAgent] using problem type PositionSearchProblem
	*** PASS: test_cases\q8\closest_dot_1.test
	*** 	pacman layout:		Test 1
	*** 	solution length:		1
	[SearchAgent] using function depthFirstSearch
	[SearchAgent] using problem type PositionSearchProblem
	*** PASS: test_cases\q8\closest_dot_10.test
	*** 	pacman layout:		Test 10
	*** 	solution length:		1
	[SearchAgent] using function depthFirstSearch
	[SearchAgent] using problem type PositionSearchProblem
	*** PASS: test_cases\q8\closest_dot_11.test
	*** 	pacman layout:		Test 11
	*** 	solution length:		2
	[SearchAgent] using function depthFirstSearch
	[SearchAgent] using problem type PositionSearchProblem
	*** PASS: test_cases\q8\closest_dot_12.test
	*** 	pacman layout:		Test 12
	*** 	solution length:		3
	[SearchAgent] using function depthFirstSearch
	[SearchAgent] using problem type PositionSearchProblem
	*** PASS: test_cases\q8\closest_dot_13.test
	*** 	pacman layout:		Test 13
	*** 	solution length:		1
	[SearchAgent] using function depthFirstSearch
	[SearchAgent] using problem type PositionSearchProblem
	*** PASS: test_cases\q8\closest_dot_2.test
	*** 	pacman layout:		Test 2
	*** 	solution length:		1
	[SearchAgent] using function depthFirstSearch
	[SearchAgent] using problem type PositionSearchProblem
	*** PASS: test_cases\q8\closest_dot_3.test
	*** 	pacman layout:		Test 3
	*** 	solution length:		1
	[SearchAgent] using function depthFirstSearch
	[SearchAgent] using problem type PositionSearchProblem
	*** PASS: test_cases\q8\closest_dot_4.test
	*** 	pacman layout:		Test 4
	*** 	solution length:		3
	[SearchAgent] using function depthFirstSearch
	[SearchAgent] using problem type PositionSearchProblem
	*** PASS: test_cases\q8\closest_dot_5.test
	*** 	pacman layout:		Test 5
	*** 	solution length:		1
	[SearchAgent] using function depthFirstSearch
	[SearchAgent] using problem type PositionSearchProblem
	*** PASS: test_cases\q8\closest_dot_6.test
	*** 	pacman layout:		Test 6
	*** 	solution length:		2
	[SearchAgent] using function depthFirstSearch
	[SearchAgent] using problem type PositionSearchProblem
	*** PASS: test_cases\q8\closest_dot_7.test
	*** 	pacman layout:		Test 7
	*** 	solution length:		1
	[SearchAgent] using function depthFirstSearch
	[SearchAgent] using problem type PositionSearchProblem
	*** PASS: test_cases\q8\closest_dot_8.test
	*** 	pacman layout:		Test 8
	*** 	solution length:		1
	[SearchAgent] using function depthFirstSearch
	[SearchAgent] using problem type PositionSearchProblem
	*** PASS: test_cases\q8\closest_dot_9.test
	*** 	pacman layout:		Test 9
	*** 	solution length:		1

	### Question q8: 3/3 ###


	Finished at 22:18:36

	Provisional grades
	==================
	Question q1: 3/3
	Question q2: 3/3
	Question q3: 3/3
	Question q4: 3/3
	Question q5: 3/3
	Question q6: 3/3
	Question q7: 5/4
	Question q8: 3/3
	------------------
	Total: 26/25

4. Paste the git log.

commit 83eca9c482baa19ad848c1b4d185279f7b40feb2
Author: JefreyHildebrandt <JefreyHildebrandt@gmail.com>
Date:   Tue Sep 25 22:19:41 2018 -0400

    final rev

diff --git a/CAP5636 - Advanced AI/Assignment 1 Search/search.py b/CAP5636 - Advanced AI/Assignment 1 Search/search.py
index be27880..e098ffc 100644
--- a/CAP5636 - Advanced AI/Assignment 1 Search/search.py	
+++ b/CAP5636 - Advanced AI/Assignment 1 Search/search.py	
@@ -170,74 +170,44 @@ def heuristic(a, b):
     (x2, y2) = b
     return abs(x1 - x2) + abs(y1 - y2)
 
-def is_custom_state(state):
-    return len(state) > 1 and isinstance(state[1], set)
-
-def convert_state_for_map(state):
-    if is_custom_state(state):
-        return state[0]
-    return state
-
-def add_coords_to_map(state, problem, total_path):
-    if is_custom_state(state):
-        problem.add_coords_to_map(state, problem, total_path)
-    return state
+# def is_custom_state(state):
+#     return len(state) > 1 and isinstance(state[1], set)
+#
+# def convert_state_for_map(state):
+#     if is_custom_state(state):
+#         return state[0]
+#     return state
+#
+# def add_coords_to_map(state, problem, total_path):
+#     if is_custom_state(state):
+#         problem.add_coords_to_map(state, problem, total_path)
+#     return state
 
 def aStarSearch(problem, heuristic=nullHeuristic):
     """Search the node that has the lowest combined cost and heuristic first."""
     # python pacman.py -l bigMaze -z .5 -p SearchAgent -a fn=astar,heuristic=manhattanHeuristic
     "*** YOUR CODE HERE ***"
-    frontier = util.PriorityQueue()
-    start_state = convert_state_for_map(problem.getStartState())
-    frontier.push((problem.getStartState(), None), 0)
-    came_from = dict()
-    cost_so_far = dict()
-    came_from[start_state] = None
-    cost_so_far[start_state] = 0
-
-    is_custom = is_custom_state(problem.getStartState())
-    total_path = []
-
-    while not frontier.isEmpty():
-        current = frontier.pop()
-
-        if not is_custom:
-            goal_result = problem.isGoalState(add_coords_to_map(current[coordinate], problem, total_path))
-        else:
-            goal_result = problem.isGoalState(add_coords_to_map(current[coordinate], problem, total_path), is_custom)
-
-        if goal_result == True:
-            total_path.append(current[direction])
-            while convert_state_for_map(current[coordinate]) in came_from:
-                current = came_from[convert_state_for_map(current[coordinate])]
-                if current[direction] == None:
-                    return total_path
-                total_path = [current[direction]] + total_path
-        elif goal_result == 'reset' and current[coordinate] not in total_path:
-            total_path.append(current[direction])
-            while convert_state_for_map(current[coordinate]) in came_from:
-                current = came_from[convert_state_for_map(current[coordinate])]
-                if current == None:
-                    print('')
-                if current[direction] == None:
-                    came_from = dict()
-                    cost_so_far = dict()
-                    came_from[start_state] = None
-                    cost_so_far[start_state] = 0
-                    break
-                total_path = [current[direction]] + total_path
-
-
-        for coord, dir, cost in problem.getSuccessors(current[coordinate]):
-            new_cost = cost_so_far[convert_state_for_map(current[coordinate])] + cost
-            if convert_state_for_map(coord) not in cost_so_far or new_cost < cost_so_far[convert_state_for_map(coord)]:
-                cost_so_far[convert_state_for_map(coord)] = new_cost
-                priority = new_cost + heuristic(coord, problem)
-                frontier.push((coord, dir), priority)
-                came_from[convert_state_for_map(coord)] = current
 
-    return []
+    fringe = util.PriorityQueue()
+    fringe.push(problem.getStartState(), 0)
+    came_from = util.PriorityQueue()
+    visited = []
+    total_path = []
 
+    curr_state = fringe.pop()
+    while not problem.isGoalState(curr_state):
+        if curr_state not in visited:
+            visited.append(curr_state)
+            for coord, direction, cost in problem.getSuccessors(curr_state):
+                if coord not in visited:
+                    temp_path = total_path + [direction]
+                    cost_so_far = problem.getCostOfActions(temp_path) + heuristic(coord, problem)
+                    fringe.push(coord, cost_so_far)
+                    came_from.push(temp_path, cost_so_far)
+        total_path = came_from.pop()
+        curr_state = fringe.pop()
+
+    return total_path
 
 # Abbreviations
 bfs = breadthFirstSearch

commit 2a25e54e8acbde133e73994aefb3413b6bbaa024
Author: JefreyHildebrandt <JefreyHildebrandt@gmail.com>
Date:   Mon Sep 24 18:07:28 2018 -0400

    updated code

diff --git a/CAP5636 - Advanced AI/Assignment 1 Search/search.py b/CAP5636 - Advanced AI/Assignment 1 Search/search.py
index fcef532..be27880 100644
--- a/CAP5636 - Advanced AI/Assignment 1 Search/search.py	
+++ b/CAP5636 - Advanced AI/Assignment 1 Search/search.py	
@@ -170,12 +170,19 @@ def heuristic(a, b):
     (x2, y2) = b
     return abs(x1 - x2) + abs(y1 - y2)
 
+def is_custom_state(state):
+    return len(state) > 1 and isinstance(state[1], set)
 
 def convert_state_for_map(state):
-    if len(state) > 1 and isinstance(state[1], set):
+    if is_custom_state(state):
         return state[0]
     return state
 
+def add_coords_to_map(state, problem, total_path):
+    if is_custom_state(state):
+        problem.add_coords_to_map(state, problem, total_path)
+    return state
+
 def aStarSearch(problem, heuristic=nullHeuristic):
     """Search the node that has the lowest combined cost and heuristic first."""
     # python pacman.py -l bigMaze -z .5 -p SearchAgent -a fn=astar,heuristic=manhattanHeuristic
@@ -188,16 +195,37 @@ def aStarSearch(problem, heuristic=nullHeuristic):
     came_from[start_state] = None
     cost_so_far[start_state] = 0
 
+    is_custom = is_custom_state(problem.getStartState())
+    total_path = []
+
     while not frontier.isEmpty():
         current = frontier.pop()
 
-        if problem.isGoalState(current[coordinate]):
-            total_path = [current[direction]]
-            while current[coordinate] in came_from:
+        if not is_custom:
+            goal_result = problem.isGoalState(add_coords_to_map(current[coordinate], problem, total_path))
+        else:
+            goal_result = problem.isGoalState(add_coords_to_map(current[coordinate], problem, total_path), is_custom)
+
+        if goal_result == True:
+            total_path.append(current[direction])
+            while convert_state_for_map(current[coordinate]) in came_from:
                 current = came_from[convert_state_for_map(current[coordinate])]
                 if current[direction] == None:
                     return total_path
                 total_path = [current[direction]] + total_path
+        elif goal_result == 'reset' and current[coordinate] not in total_path:
+            total_path.append(current[direction])
+            while convert_state_for_map(current[coordinate]) in came_from:
+                current = came_from[convert_state_for_map(current[coordinate])]
+                if current == None:
+                    print('')
+                if current[direction] == None:
+                    came_from = dict()
+                    cost_so_far = dict()
+                    came_from[start_state] = None
+                    cost_so_far[start_state] = 0
+                    break
+                total_path = [current[direction]] + total_path
 
 
         for coord, dir, cost in problem.getSuccessors(current[coordinate]):

commit 956272a70bfe48b023a1fb906d7e3aa34db08269
Author: JefreyHildebrandt <JefreyHildebrandt@gmail.com>
Date:   Thu Sep 20 20:42:02 2018 -0400

    Partial search agents implementation

diff --git a/CAP5636 - Advanced AI/Assignment 1 Search/search.py b/CAP5636 - Advanced AI/Assignment 1 Search/search.py
index e4e6a26..fcef532 100644
--- a/CAP5636 - Advanced AI/Assignment 1 Search/search.py	
+++ b/CAP5636 - Advanced AI/Assignment 1 Search/search.py	
@@ -87,22 +87,24 @@ coordinate = 0
 direction = 1
 cost = 2
 
-def treeSearch(problem, strategy):
+def treeSearch(problem, strategy, get_cur_coord = lambda state: state):
     # initializing the strategy structure with tuple of [(x, y), Direction, Cost]
     paths = strategy()
     strat = strategy()
     strat.push(problem.getStartState())
-    visited = set()
+    visited = []
     path = []
     while not strat.isEmpty():
         cur_coord = strat.pop()
         if cur_coord not in visited:
-            visited.add(cur_coord)
+            visited.append(cur_coord)
             if problem.isGoalState(cur_coord):
                 return path
-            for coord, dir, cost in problem.getSuccessors(cur_coord):
-                strat.push(coord)
-                paths.push(path + [dir])
+            for coord in problem.getSuccessors(cur_coord):
+                # if isinstance(coord[0][0], tuple):
+                #     coord = coord[0]
+                strat.push(coord[coordinate])
+                paths.push(path + [coord[direction]])
         if paths.isEmpty():
             return []
         path = paths.pop()
@@ -169,38 +171,22 @@ def heuristic(a, b):
     return abs(x1 - x2) + abs(y1 - y2)
 
 
-# def a_star_search(graph, start, goal):
-#     frontier = PriorityQueue()
-#     frontier.put(start, 0)
-#     came_from = {}
-#     cost_so_far = {}
-#     came_from[start] = None
-#     cost_so_far[start] = 0
-#
-#     while not frontier.empty():
-#         current = frontier.get()
-#
-#         if current == goal:
-#             break
-#
-#         for next in graph.neighbors(current):
-#             new_cost = cost_so_far[current] + graph.cost(current, next)
-#             if next not in cost_so_far or new_cost < cost_so_far[next]:
-#                 cost_so_far[next] = new_cost
-#                 priority = new_cost + heuristic(goal, next)
-#                 frontier.put(next, priority)
-#                 came_from[next] = current
-#
-#     return came_from, cost_so_far
+def convert_state_for_map(state):
+    if len(state) > 1 and isinstance(state[1], set):
+        return state[0]
+    return state
+
 def aStarSearch(problem, heuristic=nullHeuristic):
     """Search the node that has the lowest combined cost and heuristic first."""
+    # python pacman.py -l bigMaze -z .5 -p SearchAgent -a fn=astar,heuristic=manhattanHeuristic
     "*** YOUR CODE HERE ***"
     frontier = util.PriorityQueue()
+    start_state = convert_state_for_map(problem.getStartState())
     frontier.push((problem.getStartState(), None), 0)
     came_from = dict()
     cost_so_far = dict()
-    came_from[problem.getStartState()] = None
-    cost_so_far[problem.getStartState()] = 0
+    came_from[start_state] = None
+    cost_so_far[start_state] = 0
 
     while not frontier.isEmpty():
         current = frontier.pop()
@@ -208,19 +194,19 @@ def aStarSearch(problem, heuristic=nullHeuristic):
         if problem.isGoalState(current[coordinate]):
             total_path = [current[direction]]
             while current[coordinate] in came_from:
-                current = came_from[current[coordinate]]
+                current = came_from[convert_state_for_map(current[coordinate])]
                 if current[direction] == None:
                     return total_path
                 total_path = [current[direction]] + total_path
 
 
         for coord, dir, cost in problem.getSuccessors(current[coordinate]):
-            new_cost = cost_so_far[current[coordinate]] + cost
-            if coord not in cost_so_far or new_cost < cost_so_far[coord]:
-                cost_so_far[coord] = new_cost
+            new_cost = cost_so_far[convert_state_for_map(current[coordinate])] + cost
+            if convert_state_for_map(coord) not in cost_so_far or new_cost < cost_so_far[convert_state_for_map(coord)]:
+                cost_so_far[convert_state_for_map(coord)] = new_cost
                 priority = new_cost + heuristic(coord, problem)
                 frontier.push((coord, dir), priority)
-                came_from[coord] = current
+                came_from[convert_state_for_map(coord)] = current
 
     return []
 

commit b688c9af65c74ade02973d1aa72d76bcdd74d8fd
Author: JefreyHildebrandt <JefreyHildebrandt@gmail.com>
Date:   Wed Sep 19 20:57:08 2018 -0400

    search.py is done

diff --git a/CAP5636 - Advanced AI/Assignment 1 Search/search.py b/CAP5636 - Advanced AI/Assignment 1 Search/search.py
index df7b9f5..e4e6a26 100644
--- a/CAP5636 - Advanced AI/Assignment 1 Search/search.py	
+++ b/CAP5636 - Advanced AI/Assignment 1 Search/search.py	
@@ -18,7 +18,7 @@ Pacman agents (in searchAgents.py).
 """
 
 import util
-from game import Directions, Configuration
+from game import Directions
 
 class SearchProblem:
     """
@@ -89,8 +89,8 @@ cost = 2
 
 def treeSearch(problem, strategy):
     # initializing the strategy structure with tuple of [(x, y), Direction, Cost]
-    strat = strategy()
     paths = strategy()
+    strat = strategy()
     strat.push(problem.getStartState())
     visited = set()
     path = []
@@ -106,17 +106,6 @@ def treeSearch(problem, strategy):
         if paths.isEmpty():
             return []
         path = paths.pop()
-
-        # last_coord = leaf_expansion[-1][coordinate]
-        # if problem.isGoalState(last_coord):
-        #     path = []
-        #     for leaf in leaf_expansion:
-        #         path.append(leaf[direction])
-        #     return path
-        # for leaf in problem.getSuccessors(last_coord):
-        #     if leaf[coordinate] not in visited:
-        #         visited.add(leaf[coordinate])
-        #         strategy.push(leaf_expansion.append(leaf))
     return []
 
 
@@ -136,20 +125,35 @@ def depthFirstSearch(problem):
     print "Start's successors:", problem.getSuccessors(problem.getStartState())
     """
     "*** YOUR CODE HERE ***"
-    print "Start:", problem.getStartState()
-    print "Is the start a goal?", problem.isGoalState(problem.getStartState())
-    print "Start's successors:", problem.getSuccessors(problem.getStartState())
     return treeSearch(problem, util.Stack)
 
 def breadthFirstSearch(problem):
     """Search the shallowest nodes in the search tree first."""
     "*** YOUR CODE HERE ***"
-    return treeSearch(problem. util.Queue)
+    return treeSearch(problem, util.Queue)
 
 def uniformCostSearch(problem):
     """Search the node of least total cost first."""
     "*** YOUR CODE HERE ***"
-    util.raiseNotDefined()
+    paths = util.PriorityQueue()
+    strat = util.PriorityQueue()
+    strat.push(problem.getStartState(), 0)
+    visited = set()
+    path = []
+    while not strat.isEmpty():
+        cur_coord = strat.pop()
+        if cur_coord not in visited:
+            visited.add(cur_coord)
+            if problem.isGoalState(cur_coord):
+                return path
+            for coord, dir, cost in problem.getSuccessors(cur_coord):
+                n_cost = problem.getCostOfActions(path + [dir])
+                strat.push(coord, n_cost)
+                paths.push(path + [dir], n_cost)
+        if paths.isEmpty():
+            return []
+        path = paths.pop()
+    return []
 
 def nullHeuristic(state, problem=None):
     """
@@ -158,10 +162,67 @@ def nullHeuristic(state, problem=None):
     """
     return 0
 
+
+def heuristic(a, b):
+    (x1, y1) = a
+    (x2, y2) = b
+    return abs(x1 - x2) + abs(y1 - y2)
+
+
+# def a_star_search(graph, start, goal):
+#     frontier = PriorityQueue()
+#     frontier.put(start, 0)
+#     came_from = {}
+#     cost_so_far = {}
+#     came_from[start] = None
+#     cost_so_far[start] = 0
+#
+#     while not frontier.empty():
+#         current = frontier.get()
+#
+#         if current == goal:
+#             break
+#
+#         for next in graph.neighbors(current):
+#             new_cost = cost_so_far[current] + graph.cost(current, next)
+#             if next not in cost_so_far or new_cost < cost_so_far[next]:
+#                 cost_so_far[next] = new_cost
+#                 priority = new_cost + heuristic(goal, next)
+#                 frontier.put(next, priority)
+#                 came_from[next] = current
+#
+#     return came_from, cost_so_far
 def aStarSearch(problem, heuristic=nullHeuristic):
     """Search the node that has the lowest combined cost and heuristic first."""
     "*** YOUR CODE HERE ***"
-    util.raiseNotDefined()
+    frontier = util.PriorityQueue()
+    frontier.push((problem.getStartState(), None), 0)
+    came_from = dict()
+    cost_so_far = dict()
+    came_from[problem.getStartState()] = None
+    cost_so_far[problem.getStartState()] = 0
+
+    while not frontier.isEmpty():
+        current = frontier.pop()
+
+        if problem.isGoalState(current[coordinate]):
+            total_path = [current[direction]]
+            while current[coordinate] in came_from:
+                current = came_from[current[coordinate]]
+                if current[direction] == None:
+                    return total_path
+                total_path = [current[direction]] + total_path
+
+
+        for coord, dir, cost in problem.getSuccessors(current[coordinate]):
+            new_cost = cost_so_far[current[coordinate]] + cost
+            if coord not in cost_so_far or new_cost < cost_so_far[coord]:
+                cost_so_far[coord] = new_cost
+                priority = new_cost + heuristic(coord, problem)
+                frontier.push((coord, dir), priority)
+                came_from[coord] = current
+
+    return []
 
 
 # Abbreviations

commit d163c3fca284409be1015bdd1755284b8c9b27c6
Author: JefreyHildebrandt <JefreyHildebrandt@gmail.com>
Date:   Wed Sep 19 15:23:31 2018 -0400

    Current update

diff --git a/CAP5636 - Advanced AI/Assignment 1 Search/search.py b/CAP5636 - Advanced AI/Assignment 1 Search/search.py
index dc56c10..df7b9f5 100644
--- a/CAP5636 - Advanced AI/Assignment 1 Search/search.py	
+++ b/CAP5636 - Advanced AI/Assignment 1 Search/search.py	
@@ -82,18 +82,42 @@ class State:
     def get_tuple(self):
         return [self.coord, self.direction, self.cost]
 
-def treeSearch(problem, strategy):
-    # initializing the strategy structure with tuple of [(x, y), Direction, Cost]
-
-    strategy.push((problem.getStartState, Directions.STOP, 0))
 
-    visitedNodes = set()
+coordinate = 0
+direction = 1
+cost = 2
 
-
-    while not strategy.isEmpty():
-        leaf_expansion = strategy.pop()
-        for successor in problem.getSuccessors(leaf_expansion):
-            print "dks"
+def treeSearch(problem, strategy):
+    # initializing the strategy structure with tuple of [(x, y), Direction, Cost]
+    strat = strategy()
+    paths = strategy()
+    strat.push(problem.getStartState())
+    visited = set()
+    path = []
+    while not strat.isEmpty():
+        cur_coord = strat.pop()
+        if cur_coord not in visited:
+            visited.add(cur_coord)
+            if problem.isGoalState(cur_coord):
+                return path
+            for coord, dir, cost in problem.getSuccessors(cur_coord):
+                strat.push(coord)
+                paths.push(path + [dir])
+        if paths.isEmpty():
+            return []
+        path = paths.pop()
+
+        # last_coord = leaf_expansion[-1][coordinate]
+        # if problem.isGoalState(last_coord):
+        #     path = []
+        #     for leaf in leaf_expansion:
+        #         path.append(leaf[direction])
+        #     return path
+        # for leaf in problem.getSuccessors(last_coord):
+        #     if leaf[coordinate] not in visited:
+        #         visited.add(leaf[coordinate])
+        #         strategy.push(leaf_expansion.append(leaf))
+    return []
 
 
 
@@ -115,12 +139,12 @@ def depthFirstSearch(problem):
     print "Start:", problem.getStartState()
     print "Is the start a goal?", problem.isGoalState(problem.getStartState())
     print "Start's successors:", problem.getSuccessors(problem.getStartState())
-    return treeSearch(problem, util.Stack())
+    return treeSearch(problem, util.Stack)
 
 def breadthFirstSearch(problem):
     """Search the shallowest nodes in the search tree first."""
     "*** YOUR CODE HERE ***"
-    return treeSearch(problem. util.Queue())
+    return treeSearch(problem. util.Queue)
 
 def uniformCostSearch(problem):
     """Search the node of least total cost first."""

commit ba17faf9a6f132fa812f98547e2e00d3e1fadf3c
Author: JefreyHildebrandt <JefreyHildebrandt@gmail.com>
Date:   Mon Sep 17 21:07:18 2018 -0400

    Search partial

diff --git a/CAP5636 - Advanced AI/Assignment 1 Search/search.py b/CAP5636 - Advanced AI/Assignment 1 Search/search.py
index 0ea2f92..dc56c10 100644
--- a/CAP5636 - Advanced AI/Assignment 1 Search/search.py	
+++ b/CAP5636 - Advanced AI/Assignment 1 Search/search.py	
@@ -18,6 +18,7 @@ Pacman agents (in searchAgents.py).
 """
 
 import util
+from game import Directions, Configuration
 
 class SearchProblem:
     """
@@ -67,13 +68,34 @@ def tinyMazeSearch(problem):
     Returns a sequence of moves that solves tinyMaze.  For any other maze, the
     sequence of moves will be incorrect, so only use this for tinyMaze.
     """
-    from game import Directions
+    # from game import Directions
     s = Directions.SOUTH
     w = Directions.WEST
     return  [s, s, w, s, w, w, s, w]
 
+class State:
+    def __init__(self, coord, direction, cost):
+        self.coord = coord
+        self.direction = direction
+        self.cost = cost
+
+    def get_tuple(self):
+        return [self.coord, self.direction, self.cost]
+
 def treeSearch(problem, strategy):
-    pass
+    # initializing the strategy structure with tuple of [(x, y), Direction, Cost]
+
+    strategy.push((problem.getStartState, Directions.STOP, 0))
+
+    visitedNodes = set()
+
+
+    while not strategy.isEmpty():
+        leaf_expansion = strategy.pop()
+        for successor in problem.getSuccessors(leaf_expansion):
+            print "dks"
+
+
 
 def depthFirstSearch(problem):
     """
@@ -90,6 +112,9 @@ def depthFirstSearch(problem):
     print "Start's successors:", problem.getSuccessors(problem.getStartState())
     """
     "*** YOUR CODE HERE ***"
+    print "Start:", problem.getStartState()
+    print "Is the start a goal?", problem.isGoalState(problem.getStartState())
+    print "Start's successors:", problem.getSuccessors(problem.getStartState())
     return treeSearch(problem, util.Stack())
 
 def breadthFirstSearch(problem):

commit b429c60384994746bc5a9eec6be9c4835b93bfab
Author: JefreyHildebrandt <JefreyHildebrandt@gmail.com>
Date:   Mon Sep 17 15:47:33 2018 -0400

    Advanced AI and Computer Vision Commit

diff --git a/CAP5636 - Advanced AI/Assignment 1 Search/search.py b/CAP5636 - Advanced AI/Assignment 1 Search/search.py
new file mode 100644
index 0000000..0ea2f92
--- /dev/null
+++ b/CAP5636 - Advanced AI/Assignment 1 Search/search.py	
@@ -0,0 +1,122 @@
+# search.py
+# ---------
+# Licensing Information:  You are free to use or extend these projects for
+# educational purposes provided that (1) you do not distribute or publish
+# solutions, (2) you retain this notice, and (3) you provide clear
+# attribution to UC Berkeley, including a link to http://ai.berkeley.edu.
+# 
+# Attribution Information: The Pacman AI projects were developed at UC Berkeley.
+# The core projects and autograders were primarily created by John DeNero
+# (denero@cs.berkeley.edu) and Dan Klein (klein@cs.berkeley.edu).
+# Student side autograding was added by Brad Miller, Nick Hay, and
+# Pieter Abbeel (pabbeel@cs.berkeley.edu).
+
+
+"""
+In search.py, you will implement generic search algorithms which are called by
+Pacman agents (in searchAgents.py).
+"""
+
+import util
+
+class SearchProblem:
+    """
+    This class outlines the structure of a search problem, but doesn't implement
+    any of the methods (in object-oriented terminology: an abstract class).
+
+    You do not need to change anything in this class, ever.
+    """
+
+    def getStartState(self):
+        """
+        Returns the start state for the search problem.
+        """
+        util.raiseNotDefined()
+
+    def isGoalState(self, state):
+        """
+          state: Search state
+
+        Returns True if and only if the state is a valid goal state.
+        """
+        util.raiseNotDefined()
+
+    def getSuccessors(self, state):
+        """
+          state: Search state
+
+        For a given state, this should return a list of triples, (successor,
+        action, stepCost), where 'successor' is a successor to the current
+        state, 'action' is the action required to get there, and 'stepCost' is
+        the incremental cost of expanding to that successor.
+        """
+        util.raiseNotDefined()
+
+    def getCostOfActions(self, actions):
+        """
+         actions: A list of actions to take
+
+        This method returns the total cost of a particular sequence of actions.
+        The sequence must be composed of legal moves.
+        """
+        util.raiseNotDefined()
+
+
+def tinyMazeSearch(problem):
+    """
+    Returns a sequence of moves that solves tinyMaze.  For any other maze, the
+    sequence of moves will be incorrect, so only use this for tinyMaze.
+    """
+    from game import Directions
+    s = Directions.SOUTH
+    w = Directions.WEST
+    return  [s, s, w, s, w, w, s, w]
+
+def treeSearch(problem, strategy):
+    pass
+
+def depthFirstSearch(problem):
+    """
+    Search the deepest nodes in the search tree first.
+
+    Your search algorithm needs to return a list of actions that reaches the
+    goal. Make sure to implement a graph search algorithm.
+
+    To get started, you might want to try some of these simple commands to
+    understand the search problem that is being passed in:
+
+    print "Start:", problem.getStartState()
+    print "Is the start a goal?", problem.isGoalState(problem.getStartState())
+    print "Start's successors:", problem.getSuccessors(problem.getStartState())
+    """
+    "*** YOUR CODE HERE ***"
+    return treeSearch(problem, util.Stack())
+
+def breadthFirstSearch(problem):
+    """Search the shallowest nodes in the search tree first."""
+    "*** YOUR CODE HERE ***"
+    return treeSearch(problem. util.Queue())
+
+def uniformCostSearch(problem):
+    """Search the node of least total cost first."""
+    "*** YOUR CODE HERE ***"
+    util.raiseNotDefined()
+
+def nullHeuristic(state, problem=None):
+    """
+    A heuristic function estimates the cost from the current state to the nearest
+    goal in the provided SearchProblem.  This heuristic is trivial.
+    """
+    return 0
+
+def aStarSearch(problem, heuristic=nullHeuristic):
+    """Search the node that has the lowest combined cost and heuristic first."""
+    "*** YOUR CODE HERE ***"
+    util.raiseNotDefined()
+
+
+# Abbreviations
+bfs = breadthFirstSearch
+dfs = depthFirstSearch
+astar = aStarSearch
+ucs = uniformCostSearch

commit 83eca9c482baa19ad848c1b4d185279f7b40feb2
Author: JefreyHildebrandt <JefreyHildebrandt@gmail.com>
Date:   Tue Sep 25 22:19:41 2018 -0400

    final rev

diff --git a/CAP5636 - Advanced AI/Assignment 1 Search/searchAgents.py b/CAP5636 - Advanced AI/Assignment 1 Search/searchAgents.py
index acdfdfe..32f99e4 100644
--- a/CAP5636 - Advanced AI/Assignment 1 Search/searchAgents.py	
+++ b/CAP5636 - Advanced AI/Assignment 1 Search/searchAgents.py	
@@ -288,7 +288,7 @@ class CornersProblem(search.SearchProblem):
         # Please add any code here which you would like to use
         # in initializing the problem
         "*** YOUR CODE HERE ***"
-        # self.corners_visited = set()
+        self.global_corners = set()
         self.startingGameState = startingGameState
 
 
@@ -302,14 +302,19 @@ class CornersProblem(search.SearchProblem):
 
     def isGoalState(self, state, get_corners=False):
         coord, corners_visited = state
+        if get_corners:
+            corners_visited = self.global_corners
         """
         Returns whether this search state is a goal state of the problem.
         """
         "*** YOUR CODE HERE ***"
         if coord in self.corners:
-            corners_visited.add(coord)
-            if get_corners and len(corners_visited) < 4:
+            if get_corners and len(corners_visited) < 4 and coord not in corners_visited:
+                corners_visited.add(coord)
                 return 'reset'
+            corners_visited.add(coord)
+            if(len(corners_visited) == 4):
+                print('dd')
         return len(corners_visited) == 4
 
     def getSuccessors(self, state):
@@ -382,22 +387,13 @@ def cornersHeuristic(state, problem):
     corners = problem.corners # These are the corner coordinates
     walls = problem.walls # These are the walls of the maze, as a Grid (game.py)
 
-    # xy = state[0]
-    # visitedCorners = state[1]
-    # # Finding out the not visited corners
-    # unvisitedCorners = []
-    # for corner in corners:
-    #     if not (corner in visitedCorners):
-    #         unvisitedCorners.append(corner)
-    #
-    # """ Using Maze Distance to farthest corner as the heuristic. """
-    # heuristicvalue = [0]
-    # for corner in unvisitedCorners:
-    #     heuristicvalue.append(mazeDistance(xy, corner, problem.startingGameState))
-    # return max(heuristicvalue)
-
-    "*** YOUR CODE HERE ***"
-    return 0 # Default to trivial solution
+    xy = state[0]
+    visited_corners = state[1]
+    highest_val = [0]
+    for corner in corners:
+        if corner not in visited_corners:
+            highest_val.append(mazeDistance(xy, corner, problem.startingGameState))
+    return max(highest_val)
 
 class AStarCornersAgent(SearchAgent):
     "A SearchAgent for FoodSearchProblem using A* and your foodHeuristic"
@@ -494,8 +490,17 @@ def foodHeuristic(state, problem):
     problem.heuristicInfo['wallCount']
     """
     position, foodGrid = state
+    # if isinstance(state, tuple):
+    #     position = state
+    #     foodGrid = problem.food
     "*** YOUR CODE HERE ***"
-    return 0
+    largest = 0
+    for x in range(foodGrid.width):
+        for y in range(foodGrid.height):
+            if foodGrid[x][y]:
+                n_size = mazeDistance(position, (x, y), problem.startingGameState)
+                largest = n_size if n_size > largest else largest
+    return largest
 
 class ClosestDotSearchAgent(SearchAgent):
     "Search for all food using a sequence of searches"
@@ -526,7 +531,7 @@ class ClosestDotSearchAgent(SearchAgent):
         problem = AnyFoodSearchProblem(gameState)
 
         "*** YOUR CODE HERE ***"
-        util.raiseNotDefined()
+        return search.astar(problem)
 
 class AnyFoodSearchProblem(PositionSearchProblem):
     """
@@ -562,7 +567,7 @@ class AnyFoodSearchProblem(PositionSearchProblem):
         x,y = state
 
         "*** YOUR CODE HERE ***"
-        util.raiseNotDefined()
+        return self.food[x][y]
 
 def mazeDistance(point1, point2, gameState):
     """

commit 2a25e54e8acbde133e73994aefb3413b6bbaa024
Author: JefreyHildebrandt <JefreyHildebrandt@gmail.com>
Date:   Mon Sep 24 18:07:28 2018 -0400

    updated code

diff --git a/CAP5636 - Advanced AI/Assignment 1 Search/searchAgents.py b/CAP5636 - Advanced AI/Assignment 1 Search/searchAgents.py
index a65ed31..acdfdfe 100644
--- a/CAP5636 - Advanced AI/Assignment 1 Search/searchAgents.py	
+++ b/CAP5636 - Advanced AI/Assignment 1 Search/searchAgents.py	
@@ -289,6 +289,8 @@ class CornersProblem(search.SearchProblem):
         # in initializing the problem
         "*** YOUR CODE HERE ***"
         # self.corners_visited = set()
+        self.startingGameState = startingGameState
+
 
     def getStartState(self):
         """
@@ -298,7 +300,7 @@ class CornersProblem(search.SearchProblem):
         "*** YOUR CODE HERE ***"
         return (self.startingPosition, set())
 
-    def isGoalState(self, state):
+    def isGoalState(self, state, get_corners=False):
         coord, corners_visited = state
         """
         Returns whether this search state is a goal state of the problem.
@@ -306,6 +308,8 @@ class CornersProblem(search.SearchProblem):
         "*** YOUR CODE HERE ***"
         if coord in self.corners:
             corners_visited.add(coord)
+            if get_corners and len(corners_visited) < 4:
+                return 'reset'
         return len(corners_visited) == 4
 
     def getSuccessors(self, state):
@@ -354,6 +358,11 @@ class CornersProblem(search.SearchProblem):
             if self.walls[x][y]: return 999999
         return len(actions)
 
+    def add_coords_to_map(self, state, coord, total_path):
+        if len(state) > 1 and isinstance(state[1], set):
+            state[1].add(coord)
+        return state
+
 
 def cornersHeuristic(state, problem):
     """
@@ -373,6 +382,20 @@ def cornersHeuristic(state, problem):
     corners = problem.corners # These are the corner coordinates
     walls = problem.walls # These are the walls of the maze, as a Grid (game.py)
 
+    # xy = state[0]
+    # visitedCorners = state[1]
+    # # Finding out the not visited corners
+    # unvisitedCorners = []
+    # for corner in corners:
+    #     if not (corner in visitedCorners):
+    #         unvisitedCorners.append(corner)
+    #
+    # """ Using Maze Distance to farthest corner as the heuristic. """
+    # heuristicvalue = [0]
+    # for corner in unvisitedCorners:
+    #     heuristicvalue.append(mazeDistance(xy, corner, problem.startingGameState))
+    # return max(heuristicvalue)
+
     "*** YOUR CODE HERE ***"
     return 0 # Default to trivial solution
 

commit 956272a70bfe48b023a1fb906d7e3aa34db08269
Author: JefreyHildebrandt <JefreyHildebrandt@gmail.com>
Date:   Thu Sep 20 20:42:02 2018 -0400

    Partial search agents implementation

diff --git a/CAP5636 - Advanced AI/Assignment 1 Search/searchAgents.py b/CAP5636 - Advanced AI/Assignment 1 Search/searchAgents.py
index 1d757b1..a65ed31 100644
--- a/CAP5636 - Advanced AI/Assignment 1 Search/searchAgents.py	
+++ b/CAP5636 - Advanced AI/Assignment 1 Search/searchAgents.py	
@@ -288,6 +288,7 @@ class CornersProblem(search.SearchProblem):
         # Please add any code here which you would like to use
         # in initializing the problem
         "*** YOUR CODE HERE ***"
+        # self.corners_visited = set()
 
     def getStartState(self):
         """
@@ -295,14 +296,17 @@ class CornersProblem(search.SearchProblem):
         space)
         """
         "*** YOUR CODE HERE ***"
-        util.raiseNotDefined()
+        return (self.startingPosition, set())
 
     def isGoalState(self, state):
+        coord, corners_visited = state
         """
         Returns whether this search state is a goal state of the problem.
         """
         "*** YOUR CODE HERE ***"
-        util.raiseNotDefined()
+        if coord in self.corners:
+            corners_visited.add(coord)
+        return len(corners_visited) == 4
 
     def getSuccessors(self, state):
         """
@@ -316,14 +320,22 @@ class CornersProblem(search.SearchProblem):
         """
 
         successors = []
+        x, y = state[0]
+        visited_orners = state[1]
         for action in [Directions.NORTH, Directions.SOUTH, Directions.EAST, Directions.WEST]:
             # Add a successor state to the successor list if the action is legal
             # Here's a code snippet for figuring out whether a new position hits a wall:
-            #   x,y = currentPosition
-            #   dx, dy = Actions.directionToVector(action)
-            #   nextx, nexty = int(x + dx), int(y + dy)
-            #   hitsWall = self.walls[nextx][nexty]
 
+            dx, dy = Actions.directionToVector(action)
+            nextx, nexty = int(x + dx), int(y + dy)
+            hitsWall = self.walls[nextx][nexty]
+            corner_copy = visited_orners.copy()
+            if not hitsWall:
+                next_point = (nextx, nexty)
+                if next_point in self.corners:
+                    corner_copy.add(next_point)
+                successor = ((next_point, corner_copy), action, 1)
+                successors.append(successor)
             "*** YOUR CODE HERE ***"
 
         self._expanded += 1 # DO NOT CHANGE
@@ -345,6 +357,8 @@ class CornersProblem(search.SearchProblem):
 
 def cornersHeuristic(state, problem):
     """
+    python pacman.py -l mediumCorners -p AStarCornersAgent -z 0.5
+
     A heuristic for the CornersProblem that you defined.
 
       state:   The current search state
@@ -370,6 +384,8 @@ class AStarCornersAgent(SearchAgent):
 
 class FoodSearchProblem:
     """
+    python pacman.py -l testSearch -p AStarFoodSearchAgent
+    python pacman.py -l trickySearch -p AStarFoodSearchAgent
     A search problem associated with finding the a path that collects all of the
     food (dots) in a Pacman game.
 
@@ -426,6 +442,8 @@ class AStarFoodSearchAgent(SearchAgent):
 
 def foodHeuristic(state, problem):
     """
+    python pacman.py -l bigSearch -p ClosestDotSearchAgent -z .5
+
     Your heuristic for the FoodSearchProblem goes here.
 
     This heuristic must be consistent to ensure correctness.  First, try to come

commit b429c60384994746bc5a9eec6be9c4835b93bfab
Author: JefreyHildebrandt <JefreyHildebrandt@gmail.com>
Date:   Mon Sep 17 15:47:33 2018 -0400

    Advanced AI and Computer Vision Commit

diff --git a/CAP5636 - Advanced AI/Assignment 1 Search/searchAgents.py b/CAP5636 - Advanced AI/Assignment 1 Search/searchAgents.py
new file mode 100644
index 0000000..1d757b1
--- /dev/null
+++ b/CAP5636 - Advanced AI/Assignment 1 Search/searchAgents.py	
@@ -0,0 +1,542 @@
+# searchAgents.py
+# ---------------
+# Licensing Information:  You are free to use or extend these projects for
+# educational purposes provided that (1) you do not distribute or publish
+# solutions, (2) you retain this notice, and (3) you provide clear
+# attribution to UC Berkeley, including a link to http://ai.berkeley.edu.
+# 
+# Attribution Information: The Pacman AI projects were developed at UC Berkeley.
+# The core projects and autograders were primarily created by John DeNero
+# (denero@cs.berkeley.edu) and Dan Klein (klein@cs.berkeley.edu).
+# Student side autograding was added by Brad Miller, Nick Hay, and
+# Pieter Abbeel (pabbeel@cs.berkeley.edu).
+
+
+"""
+This file contains all of the agents that can be selected to control Pacman.  To
+select an agent, use the '-p' option when running pacman.py.  Arguments can be
+passed to your agent using '-a'.  For example, to load a SearchAgent that uses
+depth first search (dfs), run the following command:
+
+> python pacman.py -p SearchAgent -a fn=depthFirstSearch
+
+Commands to invoke other search strategies can be found in the project
+description.
+
+Please only change the parts of the file you are asked to.  Look for the lines
+that say
+
+"*** YOUR CODE HERE ***"
+
+The parts you fill in start about 3/4 of the way down.  Follow the project
+description for details.
+
+Good luck and happy searching!
+"""
+
+from game import Directions
+from game import Agent
+from game import Actions
+import util
+import time
+import search
+
+class GoWestAgent(Agent):
+    "An agent that goes West until it can't."
+
+    def getAction(self, state):
+        "The agent receives a GameState (defined in pacman.py)."
+        if Directions.WEST in state.getLegalPacmanActions():
+            return Directions.WEST
+        else:
+            return Directions.STOP
+
+#######################################################
+# This portion is written for you, but will only work #
+#       after you fill in parts of search.py          #
+#######################################################
+
+class SearchAgent(Agent):
+    """
+    This very general search agent finds a path using a supplied search
+    algorithm for a supplied search problem, then returns actions to follow that
+    path.
+
+    As a default, this agent runs DFS on a PositionSearchProblem to find
+    location (1,1)
+
+    Options for fn include:
+      depthFirstSearch or dfs
+      breadthFirstSearch or bfs
+
+
+    Note: You should NOT change any code in SearchAgent
+    """
+
+    def __init__(self, fn='depthFirstSearch', prob='PositionSearchProblem', heuristic='nullHeuristic'):
+        # Warning: some advanced Python magic is employed below to find the right functions and problems
+
+        # Get the search function from the name and heuristic
+        if fn not in dir(search):
+            raise AttributeError, fn + ' is not a search function in search.py.'
+        func = getattr(search, fn)
+        if 'heuristic' not in func.func_code.co_varnames:
+            print('[SearchAgent] using function ' + fn)
+            self.searchFunction = func
+        else:
+            if heuristic in globals().keys():
+                heur = globals()[heuristic]
+            elif heuristic in dir(search):
+                heur = getattr(search, heuristic)
+            else:
+                raise AttributeError, heuristic + ' is not a function in searchAgents.py or search.py.'
+            print('[SearchAgent] using function %s and heuristic %s' % (fn, heuristic))
+            # Note: this bit of Python trickery combines the search algorithm and the heuristic
+            self.searchFunction = lambda x: func(x, heuristic=heur)
+
+        # Get the search problem type from the name
+        if prob not in globals().keys() or not prob.endswith('Problem'):
+            raise AttributeError, prob + ' is not a search problem type in SearchAgents.py.'
+        self.searchType = globals()[prob]
+        print('[SearchAgent] using problem type ' + prob)
+
+    def registerInitialState(self, state):
+        """
+        This is the first time that the agent sees the layout of the game
+        board. Here, we choose a path to the goal. In this phase, the agent
+        should compute the path to the goal and store it in a local variable.
+        All of the work is done in this method!
+
+        state: a GameState object (pacman.py)
+        """
+        if self.searchFunction == None: raise Exception, "No search function provided for SearchAgent"
+        starttime = time.time()
+        problem = self.searchType(state) # Makes a new search problem
+        self.actions  = self.searchFunction(problem) # Find a path
+        totalCost = problem.getCostOfActions(self.actions)
+        print('Path found with total cost of %d in %.1f seconds' % (totalCost, time.time() - starttime))
+        if '_expanded' in dir(problem): print('Search nodes expanded: %d' % problem._expanded)
+
+    def getAction(self, state):
+        """
+        Returns the next action in the path chosen earlier (in
+        registerInitialState).  Return Directions.STOP if there is no further
+        action to take.
+
+        state: a GameState object (pacman.py)
+        """
+        if 'actionIndex' not in dir(self): self.actionIndex = 0
+        i = self.actionIndex
+        self.actionIndex += 1
+        if i < len(self.actions):
+            return self.actions[i]
+        else:
+            return Directions.STOP
+
+class PositionSearchProblem(search.SearchProblem):
+    """
+    A search problem defines the state space, start state, goal test, successor
+    function and cost function.  This search problem can be used to find paths
+    to a particular point on the pacman board.
+
+    The state space consists of (x,y) positions in a pacman game.
+
+    Note: this search problem is fully specified; you should NOT change it.
+    """
+
+    def __init__(self, gameState, costFn = lambda x: 1, goal=(1,1), start=None, warn=True, visualize=True):
+        """
+        Stores the start and goal.
+
+        gameState: A GameState object (pacman.py)
+        costFn: A function from a search state (tuple) to a non-negative number
+        goal: A position in the gameState
+        """
+        self.walls = gameState.getWalls()
+        self.startState = gameState.getPacmanPosition()
+        if start != None: self.startState = start
+        self.goal = goal
+        self.costFn = costFn
+        self.visualize = visualize
+        if warn and (gameState.getNumFood() != 1 or not gameState.hasFood(*goal)):
+            print 'Warning: this does not look like a regular search maze'
+
+        # For display purposes
+        self._visited, self._visitedlist, self._expanded = {}, [], 0 # DO NOT CHANGE
+
+    def getStartState(self):
+        return self.startState
+
+    def isGoalState(self, state):
+        isGoal = state == self.goal
+
+        # For display purposes only
+        if isGoal and self.visualize:
+            self._visitedlist.append(state)
+            import __main__
+            if '_display' in dir(__main__):
+                if 'drawExpandedCells' in dir(__main__._display): #@UndefinedVariable
+                    __main__._display.drawExpandedCells(self._visitedlist) #@UndefinedVariable
+
+        return isGoal
+
+    def getSuccessors(self, state):
+        """
+        Returns successor states, the actions they require, and a cost of 1.
+
+         As noted in search.py:
+             For a given state, this should return a list of triples,
+         (successor, action, stepCost), where 'successor' is a
+         successor to the current state, 'action' is the action
+         required to get there, and 'stepCost' is the incremental
+         cost of expanding to that successor
+        """
+
+        successors = []
+        for action in [Directions.NORTH, Directions.SOUTH, Directions.EAST, Directions.WEST]:
+            x,y = state
+            dx, dy = Actions.directionToVector(action)
+            nextx, nexty = int(x + dx), int(y + dy)
+            if not self.walls[nextx][nexty]:
+                nextState = (nextx, nexty)
+                cost = self.costFn(nextState)
+                successors.append( ( nextState, action, cost) )
+
+        # Bookkeeping for display purposes
+        self._expanded += 1 # DO NOT CHANGE
+        if state not in self._visited:
+            self._visited[state] = True
+            self._visitedlist.append(state)
+
+        return successors
+
+    def getCostOfActions(self, actions):
+        """
+        Returns the cost of a particular sequence of actions. If those actions
+        include an illegal move, return 999999.
+        """
+        if actions == None: return 999999
+        x,y= self.getStartState()
+        cost = 0
+        for action in actions:
+            # Check figure out the next state and see whether its' legal
+            dx, dy = Actions.directionToVector(action)
+            x, y = int(x + dx), int(y + dy)
+            if self.walls[x][y]: return 999999
+            cost += self.costFn((x,y))
+        return cost
+
+class StayEastSearchAgent(SearchAgent):
+    """
+    An agent for position search with a cost function that penalizes being in
+    positions on the West side of the board.
+
+    The cost function for stepping into a position (x,y) is 1/2^x.
+    """
+    def __init__(self):
+        self.searchFunction = search.uniformCostSearch
+        costFn = lambda pos: .5 ** pos[0]
+        self.searchType = lambda state: PositionSearchProblem(state, costFn, (1, 1), None, False)
+
+class StayWestSearchAgent(SearchAgent):
+    """
+    An agent for position search with a cost function that penalizes being in
+    positions on the East side of the board.
+
+    The cost function for stepping into a position (x,y) is 2^x.
+    """
+    def __init__(self):
+        self.searchFunction = search.uniformCostSearch
+        costFn = lambda pos: 2 ** pos[0]
+        self.searchType = lambda state: PositionSearchProblem(state, costFn)
+
+def manhattanHeuristic(position, problem, info={}):
+    "The Manhattan distance heuristic for a PositionSearchProblem"
+    xy1 = position
+    xy2 = problem.goal
+    return abs(xy1[0] - xy2[0]) + abs(xy1[1] - xy2[1])
+
+def euclideanHeuristic(position, problem, info={}):
+    "The Euclidean distance heuristic for a PositionSearchProblem"
+    xy1 = position
+    xy2 = problem.goal
+    return ( (xy1[0] - xy2[0]) ** 2 + (xy1[1] - xy2[1]) ** 2 ) ** 0.5
+
+#####################################################
+# This portion is incomplete.  Time to write code!  #
+#####################################################
+
+class CornersProblem(search.SearchProblem):
+    """
+    This search problem finds paths through all four corners of a layout.
+
+    You must select a suitable state space and successor function
+    """
+
+    def __init__(self, startingGameState):
+        """
+        Stores the walls, pacman's starting position and corners.
+        """
+        self.walls = startingGameState.getWalls()
+        self.startingPosition = startingGameState.getPacmanPosition()
+        top, right = self.walls.height-2, self.walls.width-2
+        self.corners = ((1,1), (1,top), (right, 1), (right, top))
+        for corner in self.corners:
+            if not startingGameState.hasFood(*corner):
+                print 'Warning: no food in corner ' + str(corner)
+        self._expanded = 0 # DO NOT CHANGE; Number of search nodes expanded
+        # Please add any code here which you would like to use
+        # in initializing the problem
+        "*** YOUR CODE HERE ***"
+
+    def getStartState(self):
+        """
+        Returns the start state (in your state space, not the full Pacman state
+        space)
+        """
+        "*** YOUR CODE HERE ***"
+        util.raiseNotDefined()
+
+    def isGoalState(self, state):
+        """
+        Returns whether this search state is a goal state of the problem.
+        """
+        "*** YOUR CODE HERE ***"
+        util.raiseNotDefined()
+
+    def getSuccessors(self, state):
+        """
+        Returns successor states, the actions they require, and a cost of 1.
+
+         As noted in search.py:
+            For a given state, this should return a list of triples, (successor,
+            action, stepCost), where 'successor' is a successor to the current
+            state, 'action' is the action required to get there, and 'stepCost'
+            is the incremental cost of expanding to that successor
+        """
+
+        successors = []
+        for action in [Directions.NORTH, Directions.SOUTH, Directions.EAST, Directions.WEST]:
+            # Add a successor state to the successor list if the action is legal
+            # Here's a code snippet for figuring out whether a new position hits a wall:
+            #   x,y = currentPosition
+            #   dx, dy = Actions.directionToVector(action)
+            #   nextx, nexty = int(x + dx), int(y + dy)
+            #   hitsWall = self.walls[nextx][nexty]
+
+            "*** YOUR CODE HERE ***"
+
+        self._expanded += 1 # DO NOT CHANGE
+        return successors
+
+    def getCostOfActions(self, actions):
+        """
+        Returns the cost of a particular sequence of actions.  If those actions
+        include an illegal move, return 999999.  This is implemented for you.
+        """
+        if actions == None: return 999999
+        x,y= self.startingPosition
+        for action in actions:
+            dx, dy = Actions.directionToVector(action)
+            x, y = int(x + dx), int(y + dy)
+            if self.walls[x][y]: return 999999
+        return len(actions)
+
+
+def cornersHeuristic(state, problem):
+    """
+    A heuristic for the CornersProblem that you defined.
+
+      state:   The current search state
+               (a data structure you chose in your search problem)
+
+      problem: The CornersProblem instance for this layout.
+
+    This function should always return a number that is a lower bound on the
+    shortest path from the state to a goal of the problem; i.e.  it should be
+    admissible (as well as consistent).
+    """
+    corners = problem.corners # These are the corner coordinates
+    walls = problem.walls # These are the walls of the maze, as a Grid (game.py)
+
+    "*** YOUR CODE HERE ***"
+    return 0 # Default to trivial solution
+
+class AStarCornersAgent(SearchAgent):
+    "A SearchAgent for FoodSearchProblem using A* and your foodHeuristic"
+    def __init__(self):
+        self.searchFunction = lambda prob: search.aStarSearch(prob, cornersHeuristic)
+        self.searchType = CornersProblem
+
+class FoodSearchProblem:
+    """
+    A search problem associated with finding the a path that collects all of the
+    food (dots) in a Pacman game.
+
+    A search state in this problem is a tuple ( pacmanPosition, foodGrid ) where
+      pacmanPosition: a tuple (x,y) of integers specifying Pacman's position
+      foodGrid:       a Grid (see game.py) of either True or False, specifying remaining food
+    """
+    def __init__(self, startingGameState):
+        self.start = (startingGameState.getPacmanPosition(), startingGameState.getFood())
+        self.walls = startingGameState.getWalls()
+        self.startingGameState = startingGameState
+        self._expanded = 0 # DO NOT CHANGE
+        self.heuristicInfo = {} # A dictionary for the heuristic to store information
+
+    def getStartState(self):
+        return self.start
+
+    def isGoalState(self, state):
+        return state[1].count() == 0
+
+    def getSuccessors(self, state):
+        "Returns successor states, the actions they require, and a cost of 1."
+        successors = []
+        self._expanded += 1 # DO NOT CHANGE
+        for direction in [Directions.NORTH, Directions.SOUTH, Directions.EAST, Directions.WEST]:
+            x,y = state[0]
+            dx, dy = Actions.directionToVector(direction)
+            nextx, nexty = int(x + dx), int(y + dy)
+            if not self.walls[nextx][nexty]:
+                nextFood = state[1].copy()
+                nextFood[nextx][nexty] = False
+                successors.append( ( ((nextx, nexty), nextFood), direction, 1) )
+        return successors
+
+    def getCostOfActions(self, actions):
+        """Returns the cost of a particular sequence of actions.  If those actions
+        include an illegal move, return 999999"""
+        x,y= self.getStartState()[0]
+        cost = 0
+        for action in actions:
+            # figure out the next state and see whether it's legal
+            dx, dy = Actions.directionToVector(action)
+            x, y = int(x + dx), int(y + dy)
+            if self.walls[x][y]:
+                return 999999
+            cost += 1
+        return cost
+
+class AStarFoodSearchAgent(SearchAgent):
+    "A SearchAgent for FoodSearchProblem using A* and your foodHeuristic"
+    def __init__(self):
+        self.searchFunction = lambda prob: search.aStarSearch(prob, foodHeuristic)
+        self.searchType = FoodSearchProblem
+
+def foodHeuristic(state, problem):
+    """
+    Your heuristic for the FoodSearchProblem goes here.
+
+    This heuristic must be consistent to ensure correctness.  First, try to come
+    up with an admissible heuristic; almost all admissible heuristics will be
+    consistent as well.
+
+    If using A* ever finds a solution that is worse uniform cost search finds,
+    your heuristic is *not* consistent, and probably not admissible!  On the
+    other hand, inadmissible or inconsistent heuristics may find optimal
+    solutions, so be careful.
+
+    The state is a tuple ( pacmanPosition, foodGrid ) where foodGrid is a Grid
+    (see game.py) of either True or False. You can call foodGrid.asList() to get
+    a list of food coordinates instead.
+
+    If you want access to info like walls, capsules, etc., you can query the
+    problem.  For example, problem.walls gives you a Grid of where the walls
+    are.
+
+    If you want to *store* information to be reused in other calls to the
+    heuristic, there is a dictionary called problem.heuristicInfo that you can
+    use. For example, if you only want to count the walls once and store that
+    value, try: problem.heuristicInfo['wallCount'] = problem.walls.count()
+    Subsequent calls to this heuristic can access
+    problem.heuristicInfo['wallCount']
+    """
+    position, foodGrid = state
+    "*** YOUR CODE HERE ***"
+    return 0
+
+class ClosestDotSearchAgent(SearchAgent):
+    "Search for all food using a sequence of searches"
+    def registerInitialState(self, state):
+        self.actions = []
+        currentState = state
+        while(currentState.getFood().count() > 0):
+            nextPathSegment = self.findPathToClosestDot(currentState) # The missing piece
+            self.actions += nextPathSegment
+            for action in nextPathSegment:
+                legal = currentState.getLegalActions()
+                if action not in legal:
+                    t = (str(action), str(currentState))
+                    raise Exception, 'findPathToClosestDot returned an illegal move: %s!\n%s' % t
+                currentState = currentState.generateSuccessor(0, action)
+        self.actionIndex = 0
+        print 'Path found with cost %d.' % len(self.actions)
+
+    def findPathToClosestDot(self, gameState):
+        """
+        Returns a path (a list of actions) to the closest dot, starting from
+        gameState.
+        """
+        # Here are some useful elements of the startState
+        startPosition = gameState.getPacmanPosition()
+        food = gameState.getFood()
+        walls = gameState.getWalls()
+        problem = AnyFoodSearchProblem(gameState)
+
+        "*** YOUR CODE HERE ***"
+        util.raiseNotDefined()
+
+class AnyFoodSearchProblem(PositionSearchProblem):
+    """
+    A search problem for finding a path to any food.
+
+    This search problem is just like the PositionSearchProblem, but has a
+    different goal test, which you need to fill in below.  The state space and
+    successor function do not need to be changed.
+
+    The class definition above, AnyFoodSearchProblem(PositionSearchProblem),
+    inherits the methods of the PositionSearchProblem.
+
+    You can use this search problem to help you fill in the findPathToClosestDot
+    method.
+    """
+
+    def __init__(self, gameState):
+        "Stores information from the gameState.  You don't need to change this."
+        # Store the food for later reference
+        self.food = gameState.getFood()
+
+        # Store info for the PositionSearchProblem (no need to change this)
+        self.walls = gameState.getWalls()
+        self.startState = gameState.getPacmanPosition()
+        self.costFn = lambda x: 1
+        self._visited, self._visitedlist, self._expanded = {}, [], 0 # DO NOT CHANGE
+
+    def isGoalState(self, state):
+        """
+        The state is Pacman's position. Fill this in with a goal test that will
+        complete the problem definition.
+        """
+        x,y = state
+
+        "*** YOUR CODE HERE ***"
+        util.raiseNotDefined()
+
+def mazeDistance(point1, point2, gameState):
+    """
+    Returns the maze distance between any two points, using the search functions
+    you have already built. The gameState can be any game state -- Pacman's
+    position in that state is ignored.
+
+    Example usage: mazeDistance( (2,4), (5,6), gameState)
+
+    This might be a useful helper function for your ApproximateSearchAgent.
+    """
+    x1, y1 = point1
+    x2, y2 = point2
+    walls = gameState.getWalls()
+    assert not walls[x1][y1], 'point1 is a wall: ' + str(point1)
+    assert not walls[x2][y2], 'point2 is a wall: ' + str(point2)
+    prob = PositionSearchProblem(gameState, start=point1, goal=point2, warn=False, visualize=False)
+    return len(search.bfs(prob))

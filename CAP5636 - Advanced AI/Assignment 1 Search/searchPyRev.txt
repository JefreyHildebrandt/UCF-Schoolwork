commit 83eca9c482baa19ad848c1b4d185279f7b40feb2
Author: JefreyHildebrandt <JefreyHildebrandt@gmail.com>
Date:   Tue Sep 25 22:19:41 2018 -0400

    final rev

diff --git a/CAP5636 - Advanced AI/Assignment 1 Search/search.py b/CAP5636 - Advanced AI/Assignment 1 Search/search.py
index be27880..e098ffc 100644
--- a/CAP5636 - Advanced AI/Assignment 1 Search/search.py	
+++ b/CAP5636 - Advanced AI/Assignment 1 Search/search.py	
@@ -170,74 +170,44 @@ def heuristic(a, b):
     (x2, y2) = b
     return abs(x1 - x2) + abs(y1 - y2)
 
-def is_custom_state(state):
-    return len(state) > 1 and isinstance(state[1], set)
-
-def convert_state_for_map(state):
-    if is_custom_state(state):
-        return state[0]
-    return state
-
-def add_coords_to_map(state, problem, total_path):
-    if is_custom_state(state):
-        problem.add_coords_to_map(state, problem, total_path)
-    return state
+# def is_custom_state(state):
+#     return len(state) > 1 and isinstance(state[1], set)
+#
+# def convert_state_for_map(state):
+#     if is_custom_state(state):
+#         return state[0]
+#     return state
+#
+# def add_coords_to_map(state, problem, total_path):
+#     if is_custom_state(state):
+#         problem.add_coords_to_map(state, problem, total_path)
+#     return state
 
 def aStarSearch(problem, heuristic=nullHeuristic):
     """Search the node that has the lowest combined cost and heuristic first."""
     # python pacman.py -l bigMaze -z .5 -p SearchAgent -a fn=astar,heuristic=manhattanHeuristic
     "*** YOUR CODE HERE ***"
-    frontier = util.PriorityQueue()
-    start_state = convert_state_for_map(problem.getStartState())
-    frontier.push((problem.getStartState(), None), 0)
-    came_from = dict()
-    cost_so_far = dict()
-    came_from[start_state] = None
-    cost_so_far[start_state] = 0
-
-    is_custom = is_custom_state(problem.getStartState())
-    total_path = []
-
-    while not frontier.isEmpty():
-        current = frontier.pop()
-
-        if not is_custom:
-            goal_result = problem.isGoalState(add_coords_to_map(current[coordinate], problem, total_path))
-        else:
-            goal_result = problem.isGoalState(add_coords_to_map(current[coordinate], problem, total_path), is_custom)
-
-        if goal_result == True:
-            total_path.append(current[direction])
-            while convert_state_for_map(current[coordinate]) in came_from:
-                current = came_from[convert_state_for_map(current[coordinate])]
-                if current[direction] == None:
-                    return total_path
-                total_path = [current[direction]] + total_path
-        elif goal_result == 'reset' and current[coordinate] not in total_path:
-            total_path.append(current[direction])
-            while convert_state_for_map(current[coordinate]) in came_from:
-                current = came_from[convert_state_for_map(current[coordinate])]
-                if current == None:
-                    print('')
-                if current[direction] == None:
-                    came_from = dict()
-                    cost_so_far = dict()
-                    came_from[start_state] = None
-                    cost_so_far[start_state] = 0
-                    break
-                total_path = [current[direction]] + total_path
-
-
-        for coord, dir, cost in problem.getSuccessors(current[coordinate]):
-            new_cost = cost_so_far[convert_state_for_map(current[coordinate])] + cost
-            if convert_state_for_map(coord) not in cost_so_far or new_cost < cost_so_far[convert_state_for_map(coord)]:
-                cost_so_far[convert_state_for_map(coord)] = new_cost
-                priority = new_cost + heuristic(coord, problem)
-                frontier.push((coord, dir), priority)
-                came_from[convert_state_for_map(coord)] = current
 
-    return []
+    fringe = util.PriorityQueue()
+    fringe.push(problem.getStartState(), 0)
+    came_from = util.PriorityQueue()
+    visited = []
+    total_path = []
 
+    curr_state = fringe.pop()
+    while not problem.isGoalState(curr_state):
+        if curr_state not in visited:
+            visited.append(curr_state)
+            for coord, direction, cost in problem.getSuccessors(curr_state):
+                if coord not in visited:
+                    temp_path = total_path + [direction]
+                    cost_so_far = problem.getCostOfActions(temp_path) + heuristic(coord, problem)
+                    fringe.push(coord, cost_so_far)
+                    came_from.push(temp_path, cost_so_far)
+        total_path = came_from.pop()
+        curr_state = fringe.pop()
+
+    return total_path
 
 # Abbreviations
 bfs = breadthFirstSearch

commit 2a25e54e8acbde133e73994aefb3413b6bbaa024
Author: JefreyHildebrandt <JefreyHildebrandt@gmail.com>
Date:   Mon Sep 24 18:07:28 2018 -0400

    updated code

diff --git a/CAP5636 - Advanced AI/Assignment 1 Search/search.py b/CAP5636 - Advanced AI/Assignment 1 Search/search.py
index fcef532..be27880 100644
--- a/CAP5636 - Advanced AI/Assignment 1 Search/search.py	
+++ b/CAP5636 - Advanced AI/Assignment 1 Search/search.py	
@@ -170,12 +170,19 @@ def heuristic(a, b):
     (x2, y2) = b
     return abs(x1 - x2) + abs(y1 - y2)
 
+def is_custom_state(state):
+    return len(state) > 1 and isinstance(state[1], set)
 
 def convert_state_for_map(state):
-    if len(state) > 1 and isinstance(state[1], set):
+    if is_custom_state(state):
         return state[0]
     return state
 
+def add_coords_to_map(state, problem, total_path):
+    if is_custom_state(state):
+        problem.add_coords_to_map(state, problem, total_path)
+    return state
+
 def aStarSearch(problem, heuristic=nullHeuristic):
     """Search the node that has the lowest combined cost and heuristic first."""
     # python pacman.py -l bigMaze -z .5 -p SearchAgent -a fn=astar,heuristic=manhattanHeuristic
@@ -188,16 +195,37 @@ def aStarSearch(problem, heuristic=nullHeuristic):
     came_from[start_state] = None
     cost_so_far[start_state] = 0
 
+    is_custom = is_custom_state(problem.getStartState())
+    total_path = []
+
     while not frontier.isEmpty():
         current = frontier.pop()
 
-        if problem.isGoalState(current[coordinate]):
-            total_path = [current[direction]]
-            while current[coordinate] in came_from:
+        if not is_custom:
+            goal_result = problem.isGoalState(add_coords_to_map(current[coordinate], problem, total_path))
+        else:
+            goal_result = problem.isGoalState(add_coords_to_map(current[coordinate], problem, total_path), is_custom)
+
+        if goal_result == True:
+            total_path.append(current[direction])
+            while convert_state_for_map(current[coordinate]) in came_from:
                 current = came_from[convert_state_for_map(current[coordinate])]
                 if current[direction] == None:
                     return total_path
                 total_path = [current[direction]] + total_path
+        elif goal_result == 'reset' and current[coordinate] not in total_path:
+            total_path.append(current[direction])
+            while convert_state_for_map(current[coordinate]) in came_from:
+                current = came_from[convert_state_for_map(current[coordinate])]
+                if current == None:
+                    print('')
+                if current[direction] == None:
+                    came_from = dict()
+                    cost_so_far = dict()
+                    came_from[start_state] = None
+                    cost_so_far[start_state] = 0
+                    break
+                total_path = [current[direction]] + total_path
 
 
         for coord, dir, cost in problem.getSuccessors(current[coordinate]):

commit 956272a70bfe48b023a1fb906d7e3aa34db08269
Author: JefreyHildebrandt <JefreyHildebrandt@gmail.com>
Date:   Thu Sep 20 20:42:02 2018 -0400

    Partial search agents implementation

diff --git a/CAP5636 - Advanced AI/Assignment 1 Search/search.py b/CAP5636 - Advanced AI/Assignment 1 Search/search.py
index e4e6a26..fcef532 100644
--- a/CAP5636 - Advanced AI/Assignment 1 Search/search.py	
+++ b/CAP5636 - Advanced AI/Assignment 1 Search/search.py	
@@ -87,22 +87,24 @@ coordinate = 0
 direction = 1
 cost = 2
 
-def treeSearch(problem, strategy):
+def treeSearch(problem, strategy, get_cur_coord = lambda state: state):
     # initializing the strategy structure with tuple of [(x, y), Direction, Cost]
     paths = strategy()
     strat = strategy()
     strat.push(problem.getStartState())
-    visited = set()
+    visited = []
     path = []
     while not strat.isEmpty():
         cur_coord = strat.pop()
         if cur_coord not in visited:
-            visited.add(cur_coord)
+            visited.append(cur_coord)
             if problem.isGoalState(cur_coord):
                 return path
-            for coord, dir, cost in problem.getSuccessors(cur_coord):
-                strat.push(coord)
-                paths.push(path + [dir])
+            for coord in problem.getSuccessors(cur_coord):
+                # if isinstance(coord[0][0], tuple):
+                #     coord = coord[0]
+                strat.push(coord[coordinate])
+                paths.push(path + [coord[direction]])
         if paths.isEmpty():
             return []
         path = paths.pop()
@@ -169,38 +171,22 @@ def heuristic(a, b):
     return abs(x1 - x2) + abs(y1 - y2)
 
 
-# def a_star_search(graph, start, goal):
-#     frontier = PriorityQueue()
-#     frontier.put(start, 0)
-#     came_from = {}
-#     cost_so_far = {}
-#     came_from[start] = None
-#     cost_so_far[start] = 0
-#
-#     while not frontier.empty():
-#         current = frontier.get()
-#
-#         if current == goal:
-#             break
-#
-#         for next in graph.neighbors(current):
-#             new_cost = cost_so_far[current] + graph.cost(current, next)
-#             if next not in cost_so_far or new_cost < cost_so_far[next]:
-#                 cost_so_far[next] = new_cost
-#                 priority = new_cost + heuristic(goal, next)
-#                 frontier.put(next, priority)
-#                 came_from[next] = current
-#
-#     return came_from, cost_so_far
+def convert_state_for_map(state):
+    if len(state) > 1 and isinstance(state[1], set):
+        return state[0]
+    return state
+
 def aStarSearch(problem, heuristic=nullHeuristic):
     """Search the node that has the lowest combined cost and heuristic first."""
+    # python pacman.py -l bigMaze -z .5 -p SearchAgent -a fn=astar,heuristic=manhattanHeuristic
     "*** YOUR CODE HERE ***"
     frontier = util.PriorityQueue()
+    start_state = convert_state_for_map(problem.getStartState())
     frontier.push((problem.getStartState(), None), 0)
     came_from = dict()
     cost_so_far = dict()
-    came_from[problem.getStartState()] = None
-    cost_so_far[problem.getStartState()] = 0
+    came_from[start_state] = None
+    cost_so_far[start_state] = 0
 
     while not frontier.isEmpty():
         current = frontier.pop()
@@ -208,19 +194,19 @@ def aStarSearch(problem, heuristic=nullHeuristic):
         if problem.isGoalState(current[coordinate]):
             total_path = [current[direction]]
             while current[coordinate] in came_from:
-                current = came_from[current[coordinate]]
+                current = came_from[convert_state_for_map(current[coordinate])]
                 if current[direction] == None:
                     return total_path
                 total_path = [current[direction]] + total_path
 
 
         for coord, dir, cost in problem.getSuccessors(current[coordinate]):
-            new_cost = cost_so_far[current[coordinate]] + cost
-            if coord not in cost_so_far or new_cost < cost_so_far[coord]:
-                cost_so_far[coord] = new_cost
+            new_cost = cost_so_far[convert_state_for_map(current[coordinate])] + cost
+            if convert_state_for_map(coord) not in cost_so_far or new_cost < cost_so_far[convert_state_for_map(coord)]:
+                cost_so_far[convert_state_for_map(coord)] = new_cost
                 priority = new_cost + heuristic(coord, problem)
                 frontier.push((coord, dir), priority)
-                came_from[coord] = current
+                came_from[convert_state_for_map(coord)] = current
 
     return []
 

commit b688c9af65c74ade02973d1aa72d76bcdd74d8fd
Author: JefreyHildebrandt <JefreyHildebrandt@gmail.com>
Date:   Wed Sep 19 20:57:08 2018 -0400

    search.py is done

diff --git a/CAP5636 - Advanced AI/Assignment 1 Search/search.py b/CAP5636 - Advanced AI/Assignment 1 Search/search.py
index df7b9f5..e4e6a26 100644
--- a/CAP5636 - Advanced AI/Assignment 1 Search/search.py	
+++ b/CAP5636 - Advanced AI/Assignment 1 Search/search.py	
@@ -18,7 +18,7 @@ Pacman agents (in searchAgents.py).
 """
 
 import util
-from game import Directions, Configuration
+from game import Directions
 
 class SearchProblem:
     """
@@ -89,8 +89,8 @@ cost = 2
 
 def treeSearch(problem, strategy):
     # initializing the strategy structure with tuple of [(x, y), Direction, Cost]
-    strat = strategy()
     paths = strategy()
+    strat = strategy()
     strat.push(problem.getStartState())
     visited = set()
     path = []
@@ -106,17 +106,6 @@ def treeSearch(problem, strategy):
         if paths.isEmpty():
             return []
         path = paths.pop()
-
-        # last_coord = leaf_expansion[-1][coordinate]
-        # if problem.isGoalState(last_coord):
-        #     path = []
-        #     for leaf in leaf_expansion:
-        #         path.append(leaf[direction])
-        #     return path
-        # for leaf in problem.getSuccessors(last_coord):
-        #     if leaf[coordinate] not in visited:
-        #         visited.add(leaf[coordinate])
-        #         strategy.push(leaf_expansion.append(leaf))
     return []
 
 
@@ -136,20 +125,35 @@ def depthFirstSearch(problem):
     print "Start's successors:", problem.getSuccessors(problem.getStartState())
     """
     "*** YOUR CODE HERE ***"
-    print "Start:", problem.getStartState()
-    print "Is the start a goal?", problem.isGoalState(problem.getStartState())
-    print "Start's successors:", problem.getSuccessors(problem.getStartState())
     return treeSearch(problem, util.Stack)
 
 def breadthFirstSearch(problem):
     """Search the shallowest nodes in the search tree first."""
     "*** YOUR CODE HERE ***"
-    return treeSearch(problem. util.Queue)
+    return treeSearch(problem, util.Queue)
 
 def uniformCostSearch(problem):
     """Search the node of least total cost first."""
     "*** YOUR CODE HERE ***"
-    util.raiseNotDefined()
+    paths = util.PriorityQueue()
+    strat = util.PriorityQueue()
+    strat.push(problem.getStartState(), 0)
+    visited = set()
+    path = []
+    while not strat.isEmpty():
+        cur_coord = strat.pop()
+        if cur_coord not in visited:
+            visited.add(cur_coord)
+            if problem.isGoalState(cur_coord):
+                return path
+            for coord, dir, cost in problem.getSuccessors(cur_coord):
+                n_cost = problem.getCostOfActions(path + [dir])
+                strat.push(coord, n_cost)
+                paths.push(path + [dir], n_cost)
+        if paths.isEmpty():
+            return []
+        path = paths.pop()
+    return []
 
 def nullHeuristic(state, problem=None):
     """
@@ -158,10 +162,67 @@ def nullHeuristic(state, problem=None):
     """
     return 0
 
+
+def heuristic(a, b):
+    (x1, y1) = a
+    (x2, y2) = b
+    return abs(x1 - x2) + abs(y1 - y2)
+
+
+# def a_star_search(graph, start, goal):
+#     frontier = PriorityQueue()
+#     frontier.put(start, 0)
+#     came_from = {}
+#     cost_so_far = {}
+#     came_from[start] = None
+#     cost_so_far[start] = 0
+#
+#     while not frontier.empty():
+#         current = frontier.get()
+#
+#         if current == goal:
+#             break
+#
+#         for next in graph.neighbors(current):
+#             new_cost = cost_so_far[current] + graph.cost(current, next)
+#             if next not in cost_so_far or new_cost < cost_so_far[next]:
+#                 cost_so_far[next] = new_cost
+#                 priority = new_cost + heuristic(goal, next)
+#                 frontier.put(next, priority)
+#                 came_from[next] = current
+#
+#     return came_from, cost_so_far
 def aStarSearch(problem, heuristic=nullHeuristic):
     """Search the node that has the lowest combined cost and heuristic first."""
     "*** YOUR CODE HERE ***"
-    util.raiseNotDefined()
+    frontier = util.PriorityQueue()
+    frontier.push((problem.getStartState(), None), 0)
+    came_from = dict()
+    cost_so_far = dict()
+    came_from[problem.getStartState()] = None
+    cost_so_far[problem.getStartState()] = 0
+
+    while not frontier.isEmpty():
+        current = frontier.pop()
+
+        if problem.isGoalState(current[coordinate]):
+            total_path = [current[direction]]
+            while current[coordinate] in came_from:
+                current = came_from[current[coordinate]]
+                if current[direction] == None:
+                    return total_path
+                total_path = [current[direction]] + total_path
+
+
+        for coord, dir, cost in problem.getSuccessors(current[coordinate]):
+            new_cost = cost_so_far[current[coordinate]] + cost
+            if coord not in cost_so_far or new_cost < cost_so_far[coord]:
+                cost_so_far[coord] = new_cost
+                priority = new_cost + heuristic(coord, problem)
+                frontier.push((coord, dir), priority)
+                came_from[coord] = current
+
+    return []
 
 
 # Abbreviations

commit d163c3fca284409be1015bdd1755284b8c9b27c6
Author: JefreyHildebrandt <JefreyHildebrandt@gmail.com>
Date:   Wed Sep 19 15:23:31 2018 -0400

    Current update

diff --git a/CAP5636 - Advanced AI/Assignment 1 Search/search.py b/CAP5636 - Advanced AI/Assignment 1 Search/search.py
index dc56c10..df7b9f5 100644
--- a/CAP5636 - Advanced AI/Assignment 1 Search/search.py	
+++ b/CAP5636 - Advanced AI/Assignment 1 Search/search.py	
@@ -82,18 +82,42 @@ class State:
     def get_tuple(self):
         return [self.coord, self.direction, self.cost]
 
-def treeSearch(problem, strategy):
-    # initializing the strategy structure with tuple of [(x, y), Direction, Cost]
-
-    strategy.push((problem.getStartState, Directions.STOP, 0))
 
-    visitedNodes = set()
+coordinate = 0
+direction = 1
+cost = 2
 
-
-    while not strategy.isEmpty():
-        leaf_expansion = strategy.pop()
-        for successor in problem.getSuccessors(leaf_expansion):
-            print "dks"
+def treeSearch(problem, strategy):
+    # initializing the strategy structure with tuple of [(x, y), Direction, Cost]
+    strat = strategy()
+    paths = strategy()
+    strat.push(problem.getStartState())
+    visited = set()
+    path = []
+    while not strat.isEmpty():
+        cur_coord = strat.pop()
+        if cur_coord not in visited:
+            visited.add(cur_coord)
+            if problem.isGoalState(cur_coord):
+                return path
+            for coord, dir, cost in problem.getSuccessors(cur_coord):
+                strat.push(coord)
+                paths.push(path + [dir])
+        if paths.isEmpty():
+            return []
+        path = paths.pop()
+
+        # last_coord = leaf_expansion[-1][coordinate]
+        # if problem.isGoalState(last_coord):
+        #     path = []
+        #     for leaf in leaf_expansion:
+        #         path.append(leaf[direction])
+        #     return path
+        # for leaf in problem.getSuccessors(last_coord):
+        #     if leaf[coordinate] not in visited:
+        #         visited.add(leaf[coordinate])
+        #         strategy.push(leaf_expansion.append(leaf))
+    return []
 
 
 
@@ -115,12 +139,12 @@ def depthFirstSearch(problem):
     print "Start:", problem.getStartState()
     print "Is the start a goal?", problem.isGoalState(problem.getStartState())
     print "Start's successors:", problem.getSuccessors(problem.getStartState())
-    return treeSearch(problem, util.Stack())
+    return treeSearch(problem, util.Stack)
 
 def breadthFirstSearch(problem):
     """Search the shallowest nodes in the search tree first."""
     "*** YOUR CODE HERE ***"
-    return treeSearch(problem. util.Queue())
+    return treeSearch(problem. util.Queue)
 
 def uniformCostSearch(problem):
     """Search the node of least total cost first."""

commit ba17faf9a6f132fa812f98547e2e00d3e1fadf3c
Author: JefreyHildebrandt <JefreyHildebrandt@gmail.com>
Date:   Mon Sep 17 21:07:18 2018 -0400

    Search partial

diff --git a/CAP5636 - Advanced AI/Assignment 1 Search/search.py b/CAP5636 - Advanced AI/Assignment 1 Search/search.py
index 0ea2f92..dc56c10 100644
--- a/CAP5636 - Advanced AI/Assignment 1 Search/search.py	
+++ b/CAP5636 - Advanced AI/Assignment 1 Search/search.py	
@@ -18,6 +18,7 @@ Pacman agents (in searchAgents.py).
 """
 
 import util
+from game import Directions, Configuration
 
 class SearchProblem:
     """
@@ -67,13 +68,34 @@ def tinyMazeSearch(problem):
     Returns a sequence of moves that solves tinyMaze.  For any other maze, the
     sequence of moves will be incorrect, so only use this for tinyMaze.
     """
-    from game import Directions
+    # from game import Directions
     s = Directions.SOUTH
     w = Directions.WEST
     return  [s, s, w, s, w, w, s, w]
 
+class State:
+    def __init__(self, coord, direction, cost):
+        self.coord = coord
+        self.direction = direction
+        self.cost = cost
+
+    def get_tuple(self):
+        return [self.coord, self.direction, self.cost]
+
 def treeSearch(problem, strategy):
-    pass
+    # initializing the strategy structure with tuple of [(x, y), Direction, Cost]
+
+    strategy.push((problem.getStartState, Directions.STOP, 0))
+
+    visitedNodes = set()
+
+
+    while not strategy.isEmpty():
+        leaf_expansion = strategy.pop()
+        for successor in problem.getSuccessors(leaf_expansion):
+            print "dks"
+
+
 
 def depthFirstSearch(problem):
     """
@@ -90,6 +112,9 @@ def depthFirstSearch(problem):
     print "Start's successors:", problem.getSuccessors(problem.getStartState())
     """
     "*** YOUR CODE HERE ***"
+    print "Start:", problem.getStartState()
+    print "Is the start a goal?", problem.isGoalState(problem.getStartState())
+    print "Start's successors:", problem.getSuccessors(problem.getStartState())
     return treeSearch(problem, util.Stack())
 
 def breadthFirstSearch(problem):

commit b429c60384994746bc5a9eec6be9c4835b93bfab
Author: JefreyHildebrandt <JefreyHildebrandt@gmail.com>
Date:   Mon Sep 17 15:47:33 2018 -0400

    Advanced AI and Computer Vision Commit

diff --git a/CAP5636 - Advanced AI/Assignment 1 Search/search.py b/CAP5636 - Advanced AI/Assignment 1 Search/search.py
new file mode 100644
index 0000000..0ea2f92
--- /dev/null
+++ b/CAP5636 - Advanced AI/Assignment 1 Search/search.py	
@@ -0,0 +1,122 @@
+# search.py
+# ---------
+# Licensing Information:  You are free to use or extend these projects for
+# educational purposes provided that (1) you do not distribute or publish
+# solutions, (2) you retain this notice, and (3) you provide clear
+# attribution to UC Berkeley, including a link to http://ai.berkeley.edu.
+# 
+# Attribution Information: The Pacman AI projects were developed at UC Berkeley.
+# The core projects and autograders were primarily created by John DeNero
+# (denero@cs.berkeley.edu) and Dan Klein (klein@cs.berkeley.edu).
+# Student side autograding was added by Brad Miller, Nick Hay, and
+# Pieter Abbeel (pabbeel@cs.berkeley.edu).
+
+
+"""
+In search.py, you will implement generic search algorithms which are called by
+Pacman agents (in searchAgents.py).
+"""
+
+import util
+
+class SearchProblem:
+    """
+    This class outlines the structure of a search problem, but doesn't implement
+    any of the methods (in object-oriented terminology: an abstract class).
+
+    You do not need to change anything in this class, ever.
+    """
+
+    def getStartState(self):
+        """
+        Returns the start state for the search problem.
+        """
+        util.raiseNotDefined()
+
+    def isGoalState(self, state):
+        """
+          state: Search state
+
+        Returns True if and only if the state is a valid goal state.
+        """
+        util.raiseNotDefined()
+
+    def getSuccessors(self, state):
+        """
+          state: Search state
+
+        For a given state, this should return a list of triples, (successor,
+        action, stepCost), where 'successor' is a successor to the current
+        state, 'action' is the action required to get there, and 'stepCost' is
+        the incremental cost of expanding to that successor.
+        """
+        util.raiseNotDefined()
+
+    def getCostOfActions(self, actions):
+        """
+         actions: A list of actions to take
+
+        This method returns the total cost of a particular sequence of actions.
+        The sequence must be composed of legal moves.
+        """
+        util.raiseNotDefined()
+
+
+def tinyMazeSearch(problem):
+    """
+    Returns a sequence of moves that solves tinyMaze.  For any other maze, the
+    sequence of moves will be incorrect, so only use this for tinyMaze.
+    """
+    from game import Directions
+    s = Directions.SOUTH
+    w = Directions.WEST
+    return  [s, s, w, s, w, w, s, w]
+
+def treeSearch(problem, strategy):
+    pass
+
+def depthFirstSearch(problem):
+    """
+    Search the deepest nodes in the search tree first.
+
+    Your search algorithm needs to return a list of actions that reaches the
+    goal. Make sure to implement a graph search algorithm.
+
+    To get started, you might want to try some of these simple commands to
+    understand the search problem that is being passed in:
+
+    print "Start:", problem.getStartState()
+    print "Is the start a goal?", problem.isGoalState(problem.getStartState())
+    print "Start's successors:", problem.getSuccessors(problem.getStartState())
+    """
+    "*** YOUR CODE HERE ***"
+    return treeSearch(problem, util.Stack())
+
+def breadthFirstSearch(problem):
+    """Search the shallowest nodes in the search tree first."""
+    "*** YOUR CODE HERE ***"
+    return treeSearch(problem. util.Queue())
+
+def uniformCostSearch(problem):
+    """Search the node of least total cost first."""
+    "*** YOUR CODE HERE ***"
+    util.raiseNotDefined()
+
+def nullHeuristic(state, problem=None):
+    """
+    A heuristic function estimates the cost from the current state to the nearest
+    goal in the provided SearchProblem.  This heuristic is trivial.
+    """
+    return 0
+
+def aStarSearch(problem, heuristic=nullHeuristic):
+    """Search the node that has the lowest combined cost and heuristic first."""
+    "*** YOUR CODE HERE ***"
+    util.raiseNotDefined()
+
+
+# Abbreviations
+bfs = breadthFirstSearch
+dfs = depthFirstSearch
+astar = aStarSearch
+ucs = uniformCostSearch
